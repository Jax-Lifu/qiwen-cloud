services:
  # 后端服务
  backend:
    # 构建镜像时的上下文路径和Dockerfile文件
    build:
      context: . # 使用当前目录作为构建上下文
      dockerfile: Dockerfile.backend # 使用指定的Dockerfile构建镜像
    ports:
      - "8080:8080" # 将容器内的8080端口映射到主机的8080端口
    volumes:
      # 映射启动脚本，配置文件，日志文件
      - ./script/backend/:/usr/src/app/release/bin/
      - ./conf/application.properties:/usr/src/app/release/conf/config/application.properties
      - ./logs/:/usr/src/app/release/log
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      # 后端服务连接 MySQL 的环境变量配置
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/file?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai&useSSL=false&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=a123456
    restart: always # 如果容器退出，将自动重启

  # 前端服务
  frontend:
    # 构建镜像时的上下文路径和Dockerfile文件
    build:
      context: . # 使用当前目录作为构建上下文
      dockerfile: Dockerfile.frontend # 使用指定的Dockerfile构建镜像
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf # 映射 Nginx 配置文件
    ports:
      - "8081:8081" # 将容器内的8081端口映射到主机的8081端口
    depends_on:
      - backend # 确保后端服务启动后再启动前端服务
    restart: always # 如果容器退出，将自动重启

  # MySQL 服务
  mysql:
    image: mysql:8.0 # 使用官方 MySQL 镜像
    environment:
      # MySQL 服务的初始化环境变量配置
      - MYSQL_ROOT_PASSWORD=a123456 # 设置 root 用户的密码
      - MYSQL_DATABASE=file # 创建数据库文件
    volumes:
      - mysql_data:/var/lib/mysql # 持久化 MySQL 数据库的存储
      - ./database/import.sql:/docker-entrypoint-initdb.d/import.sql # 将初始化 SQL 脚本映射到 MySQL 的初始化目录
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD" ]
      interval: 30s
      retries: 5
      start_period: 60s
      timeout: 60s
    restart: always # 如果容器退出，将自动重启

# 持久化 MySQL 数据存储的卷
volumes:
  mysql_data:
